var documenterSearchIndex = {"docs":
[{"location":"intro/#PopDyLan.jl-Documentation-1","page":"Home","title":"PopDyLan.jl Documentation","text":"","category":"section"},{"location":"intro/#","page":"Home","title":"Home","text":"PopDyLan.jl is a Julia package for exploring the population dynamics of language through agent-based simulations.","category":"page"},{"location":"intro/#","page":"Home","title":"Home","text":"note: Note\nPopDyLan.jl is currently in development, awaiting a first stable release. Use at your own risk.","category":"page"},{"location":"intro/#","page":"Home","title":"Home","text":"note: Note\nThis Documentation assumes you are running Julia 1.2 or later.","category":"page"},{"location":"usage/#Usage-1","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/#","page":"Usage","title":"Usage","text":"PopDyLan is currently under alpha development and not yet within the Julia General Registry. To install the latest stable release from GitHub:","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"using Pkg\nPkg.add(PackageSpec(url=\"https://github.com/hkauhanen/PopDyLan.jl\"))","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"Alternatively, to install the current development version with all bells and whistles (and bugs!):","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"Pkg.add(PackageSpec(url=\"https://github.com/hkauhanen/PopDyLan.jl\", rev=\"dev\"))","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"The above command(s) need be run one time only. Once installed, you can load the module at the start of your session in the usual way:","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"using PopDyLan","category":"page"},{"location":"examples/#Examples-1","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Usage examples go here...","category":"page"},{"location":"methods/#Methods-1","page":"Methods","title":"Methods","text":"","category":"section"},{"location":"methods/#","page":"Methods","title":"Methods","text":"Methods (functions) operate on types, producing an output or modifying their inputs (or, sometimes, not doing anything at all). Names of methods that (may) modify their arguments end, per Julian conventions, in an exclamation point.","category":"page"},{"location":"methods/#","page":"Methods","title":"Methods","text":"note: Note\nIn Julia, types do not own methods (like objects in, say, C++ do). As a consequence, to make foo act on bar, we do something like act(foo, bar) rather than foo.act(bar).","category":"page"},{"location":"methods/#","page":"Methods","title":"Methods","text":"Methods are here divided into simulation methods (functions you use to conduct simulations), constructor methods (constructors for types) and auxiliary methods (e.g. functions for dealing with data).","category":"page"},{"location":"methods/#Simulation-Methods-1","page":"Methods","title":"Simulation Methods","text":"","category":"section"},{"location":"methods/#","page":"Methods","title":"Methods","text":"eject!\ngetolder!(x::Speaker)\ninject!\nlisten!(x::VariationalLearner, y::Speaker, a)","category":"page"},{"location":"methods/#Main.PopDyLan.eject!","page":"Methods","title":"Main.PopDyLan.eject!","text":"eject!(x::Int, y::Community)\n\nRemove a Speaker with ID x from a Community.\n\n\n\n\n\n","category":"function"},{"location":"methods/#Main.PopDyLan.getolder!-Tuple{Speaker}","page":"Methods","title":"Main.PopDyLan.getolder!","text":"getolder!(x::Speaker)\n\nIncrease x's age by one.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Main.PopDyLan.inject!","page":"Methods","title":"Main.PopDyLan.inject!","text":"inject!(x::Speaker, y::Community)\n\nAdd a Speaker to a Community.\n\n\n\n\n\n","category":"function"},{"location":"methods/#Main.PopDyLan.listen!-Tuple{VariationalLearner,Speaker,Any}","page":"Methods","title":"Main.PopDyLan.listen!","text":"listen!(x::VariationalLearner, y::Speaker, a)\n\nMake VariationalLearner x listen to Speaker y with grammatical advantages a. Learner x's state is (potentially) updated if the learner is plastic. The speaker's state is not modified.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Constructor-Methods-1","page":"Methods","title":"Constructor Methods","text":"","category":"section"},{"location":"methods/#","page":"Methods","title":"Methods","text":"Variable(n::Int)","category":"page"},{"location":"methods/#Main.PopDyLan.Variable-Tuple{Int64}","page":"Methods","title":"Main.PopDyLan.Variable","text":"Variable(n::Int)\n\nConstructs a Variable of n values with a uniform distribution over those values.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Auxiliary-Methods-1","page":"Methods","title":"Auxiliary Methods","text":"","category":"section"},{"location":"types/#Types-1","page":"Types","title":"Types","text":"","category":"section"},{"location":"types/#","page":"Types","title":"Types","text":"In PopDyLan.jl, important data structures are given their own types. Thus, there is a type for a speaker, a type for a speech community, a type for a grammar, etc. These are referenced below, categorized into linguistic types (types for grammars, parameter settings, and the like), individual types (types for representing individual speakers) and population types (types for speech communities).","category":"page"},{"location":"types/#Linguistic-Types-1","page":"Types","title":"Linguistic Types","text":"","category":"section"},{"location":"types/#","page":"Types","title":"Types","text":"Variable","category":"page"},{"location":"types/#Main.PopDyLan.Variable","page":"Types","title":"Main.PopDyLan.Variable","text":"A linguistic variable; a probability distribution over a set of values.\n\n\n\n\n\n","category":"type"},{"location":"types/#Individual-Types-1","page":"Types","title":"Individual Types","text":"","category":"section"},{"location":"types/#","page":"Types","title":"Types","text":"Speaker\nVariationalLearner","category":"page"},{"location":"types/#Main.PopDyLan.Speaker","page":"Types","title":"Main.PopDyLan.Speaker","text":"Speaker\n\n\n\n\n\n","category":"type"},{"location":"types/#Main.PopDyLan.VariationalLearner","page":"Types","title":"Main.PopDyLan.VariationalLearner","text":"Variational Learner (1-parameter)\n\n\n\n\n\n","category":"type"},{"location":"types/#Population-Types-1","page":"Types","title":"Population Types","text":"","category":"section"},{"location":"types/#","page":"Types","title":"Types","text":"Community","category":"page"},{"location":"types/#Main.PopDyLan.Community","page":"Types","title":"Main.PopDyLan.Community","text":"Community\n\nA Community is a collection of Speakers; technically, a Dict whose values are Speakers, with integer keys. A Community is empty when initialized.\n\n\n\n\n\n","category":"type"}]
}
