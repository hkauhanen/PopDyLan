var documenterSearchIndex = {"docs":
[{"location":"intro/#PopDyLan.jl-Documentation-1","page":"Home","title":"PopDyLan.jl Documentation","text":"","category":"section"},{"location":"intro/#","page":"Home","title":"Home","text":"PopDyLan.jl is a Julia package for exploring the population dynamics of language through agent-based simulations.","category":"page"},{"location":"intro/#","page":"Home","title":"Home","text":"note: Note\nPopDyLan is currently in alpha development, awaiting a first stable release. Use at your own risk.","category":"page"},{"location":"intro/#","page":"Home","title":"Home","text":"note: Note\nThis Documentation assumes you are running Julia 1.2 or later.","category":"page"},{"location":"usage/#Usage-1","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/#","page":"Usage","title":"Usage","text":"PopDyLan is currently under alpha development and not yet within the Julia General Registry. To install the latest stable release from GitHub:","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"using Pkg\nPkg.add(PackageSpec(url=\"https://github.com/hkauhanen/PopDyLan.jl\"))","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"Alternatively, to install the current development version with all bells and whistles (and bugs!):","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"Pkg.add(PackageSpec(url=\"https://github.com/hkauhanen/PopDyLan.jl\", rev=\"dev\"))","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"The above command(s) need be run one time only. Once installed, you can load the module at the start of your session in the usual way:","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"using PopDyLan","category":"page"},{"location":"examples/#Examples-1","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#","page":"Examples","title":"Examples","text":"What follows are a few simple use cases. For full documentation, consult the Reference.","category":"page"},{"location":"examples/#Variational-learning-from-one-speaker-1","page":"Examples","title":"Variational learning from one speaker","text":"","category":"section"},{"location":"examples/#","page":"Examples","title":"Examples","text":"To simulate variational learning with input from one speaker in the parent generation, we initialize two VariationalLearners:","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"parent = VariationalLearner(0.01, 0.2, 0.1; age=30, plastic=false)\nchild = VariationalLearner(0.01, 0.2, 0.1; age=0, plastic=true)","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"By default, VariationalLeaners are constructed with a uniform distribution over their grammar probabilities. Let's modify the parent's probabilities:","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"setprobabilities!(parent, [0.1, 0.9])","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"This has the consequence that parent now speaks grammar G1 with probability 0.1 and grammar G2 with probability 0.9.","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Finally, to make child learn from parent over 10,000 iterations:","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"for i in 1:10_000\n  listen!(child, parent)\nend","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"You can consult child.probabilities to see how the learner's grammatical probabilities have changed by the end of the learning episode.","category":"page"},{"location":"examples/#Iterated-learning-across-generations-1","page":"Examples","title":"Iterated learning across generations","text":"","category":"section"},{"location":"examples/#","page":"Examples","title":"Examples","text":"It is easy to modify the above example to cater for inter-generational learning (a single speakerâ€“listener loop), say for 10 generations:","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"parent = VariationalLearner(0.01, 0.2, 0.1; age=30, plastic=false)\nsetprobabilities!(parent, [0.1, 0.9])\nfor gen in 1:10\n  child = VariationalLearner(0.01, 0.2, 0.1; age=0, plastic=true)\n  for i in 1:10_000\n    listen!(child, parent)\n  end\n  parent = child\nend","category":"page"},{"location":"examples/#A-community-of-variational-learners-1","page":"Examples","title":"A community of variational learners","text":"","category":"section"},{"location":"examples/#A-multidimensional-variational-learner-1","page":"Examples","title":"A multidimensional variational learner","text":"","category":"section"},{"location":"methods/#Functions-and-Methods-1","page":"Functions and Methods","title":"Functions and Methods","text":"","category":"section"},{"location":"methods/#","page":"Functions and Methods","title":"Functions and Methods","text":"Methods (functions) operate on types, producing an output or modifying their inputs (or, sometimes, not doing anything at all). Names of methods that (may) modify their arguments end, per Julian conventions, in an exclamation point.","category":"page"},{"location":"methods/#","page":"Functions and Methods","title":"Functions and Methods","text":"note: Note\nIn Julia, types do not own methods (like objects in, say, C++ do). As a consequence, to make foo act on bar, we do something like act(foo, bar) rather than foo.act(bar).","category":"page"},{"location":"methods/#","page":"Functions and Methods","title":"Functions and Methods","text":"note: Note\nConstructor methods are documented under Types and Constructors.","category":"page"},{"location":"methods/#","page":"Functions and Methods","title":"Functions and Methods","text":"Methods are here divided into simulation methods (functions you use to conduct simulations) and auxiliary methods (e.g. functions for dealing with data).","category":"page"},{"location":"methods/#Simulation-Methods-1","page":"Functions and Methods","title":"Simulation Methods","text":"","category":"section"},{"location":"methods/#","page":"Functions and Methods","title":"Functions and Methods","text":"eject!\ngetolder!\ninject!\nlearn!\nlisten!\nsetprobabilities!\nspeak","category":"page"},{"location":"methods/#Main.PopDyLan.eject!","page":"Functions and Methods","title":"Main.PopDyLan.eject!","text":"eject!(x::Int, y::Community)\n\nRemove a Speaker with ID x from a Community.\n\n\n\n\n\n","category":"function"},{"location":"methods/#Main.PopDyLan.getolder!","page":"Functions and Methods","title":"Main.PopDyLan.getolder!","text":"getolder!(x::Speaker)\n\nIncrease x's age by one.\n\n\n\n\n\ngetolder!(x::Community)\n\nIncrease the age of everyone in x by one.\n\n\n\n\n\n","category":"function"},{"location":"methods/#Main.PopDyLan.inject!","page":"Functions and Methods","title":"Main.PopDyLan.inject!","text":"inject!(x::Speaker, y::Community)\n\nAdd a Speaker to a Community.\n\n\n\n\n\n","category":"function"},{"location":"methods/#Main.PopDyLan.learn!","page":"Functions and Methods","title":"Main.PopDyLan.learn!","text":"learn!(x::VariationalLearner, y::Int)\n\nMake VariationalLearner learn from input token y, which is simply a grammar index.\n\nCalled by listen!, this function is unlikely to be of use in itself to the end user. Implements Bush and Mosteller's Linear Reward-Penalty Learning algorithm, generalized for n dimensions.\n\n\n\n\n\n","category":"function"},{"location":"methods/#Main.PopDyLan.listen!","page":"Functions and Methods","title":"Main.PopDyLan.listen!","text":"listen!(x::VariationalLearner, y::VariationalLearner)\n\nMake VariationalLearner x listen to one utterance from y and learn based on this input experience.\n\nThe state of x may change as a result; the state of y is guaranteed not to change.\n\n\n\n\n\n","category":"function"},{"location":"methods/#Main.PopDyLan.speak","page":"Functions and Methods","title":"Main.PopDyLan.speak","text":"speak(x::VariationalLearner)\n\nCauses VariationalLearner x to speak, i.e. to pick one of its grammars for production according to its internalized grammar probabilities. Returns an integer (the index of this grammar).\n\nCalled by listen!, this function is unlikely to be of use in itself to the end user.\n\n\n\n\n\n","category":"function"},{"location":"methods/#Auxiliary-Methods-1","page":"Functions and Methods","title":"Auxiliary Methods","text":"","category":"section"},{"location":"types/#Types-and-Constructors-1","page":"Types and Constructors","title":"Types and Constructors","text":"","category":"section"},{"location":"types/#","page":"Types and Constructors","title":"Types and Constructors","text":"In PopDyLan.jl, important data structures are given their own types. Thus, there is a type for a speaker, a type for a speech community, a type for a grammar, etc. These are referenced below, categorized into linguistic types (types for grammars, parameter settings, and the like), individual types (types for representing individual speakers) and population types (types for speech communities).","category":"page"},{"location":"types/#Linguistic-Types-1","page":"Types and Constructors","title":"Linguistic Types","text":"","category":"section"},{"location":"types/#","page":"Types and Constructors","title":"Types and Constructors","text":"Variable","category":"page"},{"location":"types/#Main.PopDyLan.Variable","page":"Types and Constructors","title":"Main.PopDyLan.Variable","text":"Variable\n\nA linguistic variable; a probability distribution over a set of values.\n\n\n\n\n\n","category":"type"},{"location":"types/#Individual-Types-1","page":"Types and Constructors","title":"Individual Types","text":"","category":"section"},{"location":"types/#","page":"Types and Constructors","title":"Types and Constructors","text":"Speaker\nVariationalLearner\nVariationalLearner(g::Float64, A::Array{Float64,2}; age::Int=0, plastic::Bool=true)\nVariationalLearner(g::Float64, a1::Float64, a2::Float64; age::Int=0, plastic::Bool=true)","category":"page"},{"location":"types/#Main.PopDyLan.Speaker","page":"Types and Constructors","title":"Main.PopDyLan.Speaker","text":"Speaker\n\n\n\n\n\n","category":"type"},{"location":"types/#Main.PopDyLan.VariationalLearner","page":"Types and Constructors","title":"Main.PopDyLan.VariationalLearner","text":"VariationalLearner\n\nA Variational Learner, a subtype of the abstract Speaker type.\n\n\n\n\n\n","category":"type"},{"location":"types/#Main.PopDyLan.VariationalLearner-Tuple{Float64,Array{Float64,2}}","page":"Types and Constructors","title":"Main.PopDyLan.VariationalLearner","text":"VariationalLearner(g::Float64, A::Array{Float64,2}; age::Int=0, plastic::Bool=true)\n\nConstructs a VariationalLearner with learning rate g and advantage matrix A.\n\nThe dimensions of A implicitly define the dimensionality of the learner. Note that no checking is performed to make sure that A is a valid advantage matrix. The learner's age and plasticity flag can be optionally set with the keyword arguments age and plastic. By default, each learner is constructed with age 0 and in a plastic state.\n\n\n\n\n\n","category":"method"},{"location":"types/#Main.PopDyLan.VariationalLearner-Tuple{Float64,Float64,Float64}","page":"Types and Constructors","title":"Main.PopDyLan.VariationalLearner","text":"VariationalLearner(g::Float64, a1::Float64, a2::Float64; age::Int=0, plastic::Bool=true)\n\nConstructs a classical 2-grammar (i.e. 1-parameter) VariationalLearner with learning rate g and advantage parameters a1 and a2.\n\nThe order of the advantage parameters is important: the first one becomes the advantage for grammar G1 (parameter on), the second one the advantage for grammar G2 (parameter off). The learner's age and plasticity flag can be optionally set with the keyword arguments age and plastic. By default, each learner is constructed with age 0 and in a plastic state.\n\n\n\n\n\n","category":"method"},{"location":"types/#Population-Types-1","page":"Types and Constructors","title":"Population Types","text":"","category":"section"},{"location":"types/#","page":"Types and Constructors","title":"Types and Constructors","text":"Community","category":"page"},{"location":"types/#Main.PopDyLan.Community","page":"Types and Constructors","title":"Main.PopDyLan.Community","text":"Community\n\nA Community is a collection of Speakers; technically, a Dict whose values are Speakers, with integer keys. A Community is empty when initialized; see inject! and eject!.\n\n\n\n\n\n","category":"type"}]
}
